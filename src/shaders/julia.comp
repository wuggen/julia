#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform image2D img;
layout(set = 0, binding = 1) uniform Data {
  vec4 color[3];
  float midpt;

  uint n;
  vec2 c;

  uint iters;

  vec2 center;
  vec2 extents;
} data;

vec2 complex_mul(vec2 a, vec2 b) {
  return vec2(
      a.x * b.x - a.y * b.y,
      a.x * b.y + a.y * b.x
  );
}

vec2 complex_exp(vec2 z, uint n) {
  vec2 zn = vec2(1.0, 0.0);

  for (uint i = 0; i < n; i += 1) {
    zn = complex_mul(zn, z);
  }

  return zn;
}

vec2 mandelbrot_iteration(vec2 c, vec2 z) {
  return complex_exp(z, data.n) + c;
}

vec2 julia_iteration(vec2 z) {
  return mandelbrot_iteration(data.c, z);
}

vec4 interpolate_color(float interpolant) {
  if (interpolant < data.midpt) {
    interpolant = interpolant / data.midpt;
    vec4 c = mix(data.color[0], data.color[1], interpolant);

    return c;
  } else {
    interpolant = (interpolant - data.midpt) / (1.0 - data.midpt);
    vec4 c = mix(data.color[1], data.color[2], interpolant);

    return c;
  }
}

float julia(vec2 z, float R) {
  uint i;
  for (i = 0; i < data.iters; i += 1) {
    if (length(z) > R) {
      break;
    } else {
      z = julia_iteration(z);
    }
  }

  float nu;
  if (i < data.iters) {
    uint k = i + 1;
    nu = float(i) - log(log(length(z)) / log(R)) / log(float(data.n));
    //nu = float(i) - log(log(length(z)) / log(R));
  } else {
    nu = float(i);
  }

  return nu / float(data.iters);
  //return float(i) / float(data.iters);
}

float mandelbrot(vec2 c, float R) {
  vec2 z = vec2(0);
  uint i;
  for (i = 0; i < data.iters; i += 1) {
    if (length(z) > R) {
      break;
    } else {
      z = mandelbrot_iteration(c, z);
    }
  }

  float nu;
  if (i < data.iters) {
    uint k = i + 1;
    //nu = float(k) - log(log(length(z)) / log(R)) / log(max(data.extents.x, data.extents.y));
    nu = float(k) - log(log(length(z)) / log(R)) / log(R);
  } else {
    nu = float(i);
  }

  return nu / float(data.iters);
}

vec2 get_z(vec2 offs) {
  vec2 z =
    (((gl_GlobalInvocationID.xy + offs) * 2.0 / vec2(imageSize(img)))) - vec2(1.0);
  z.y = -z.y;

  return data.center + z * (data.extents / 2.0);
  //return z;
}

void main() {
  //float R = max(float(data.iters), 4.0);
  //float R = max(sqrt(float(data.iters)), 4.0);
  float R = 1000.0;

  vec2 z1 = get_z(vec2(1.0/3.0, 1.0/3.0));
  vec2 z2 = get_z(vec2(1.0/3.0, 2.0/3.0));
  vec2 z3 = get_z(vec2(2.0/3.0, 1.0/3.0));
  vec2 z4 = get_z(vec2(2.0/3.0, 2.0/3.0));

  /*
  if (coords.x == 0 || coords.y == 0) {
    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(1, 0, 1, 1));
    return;
  }

  if (coords.x == 1 && (abs(z.y - 1.0) < 0.025 || abs(z.y + 1.0) < 0.025)) {
    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(1, 0, 1, 1));
    return;
  }

  if (coords.y == -1 && (abs(z.x - 1.0) < 0.025 || abs(z.x + 1.0) < 0.025)) {
    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(1, 0, 1, 1));
    return;
  }
  */

  float interpolant1 = julia(z1, R);
  float interpolant2 = julia(z2, R);
  float interpolant3 = julia(z3, R);
  float interpolant4 = julia(z4, R);

  vec4 color1 = interpolate_color(interpolant1);
  vec4 color2 = interpolate_color(interpolant2);
  vec4 color3 = interpolate_color(interpolant3);
  vec4 color4 = interpolate_color(interpolant4);

  vec4 color = 0.25 * (color1 + color2 + color3 + color4);
  //float interpolant = mandelbrot(z, R);
  imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
}
